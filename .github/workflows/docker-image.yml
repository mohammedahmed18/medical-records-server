name: Docker Image CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up environment
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "QR_SECRET=${{ secrets.QR_SECRET }}" >> .env
        echo "ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}" >> .env
        echo "RT_SECRET=${{ secrets.RT_SECRET }}" >> .env
        echo "COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}" >> .env
        echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
        echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
        echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env


        
    - name: Check environment variable
      run: |
        if [[ -z $(cat .env) ]]; then
          echo "Error: environment variable is empty"
          exit 1
        fi
        
            
    - name: Log in to Docker Hub
      run: docker login --username mohammed180 --password ${{ secrets.DOCKERHUB_PASSWORD }}
      

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag medical-records-server
      env: 
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        

    - name: Tag Docker image
      run: docker tag medical-records-server mohammed180/medical-records-server:latest

    - name: Push the Docker image to Docker Hub
      run: docker push mohammed180/medical-records-server:latest
    
    - name: Deploy in EC2
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
        HOSTNAME : ${{ secrets.SSH_HOST  }}
        USER_NAME : ${{ secrets.SSH_USERNAME  }}
        
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}
        
        #Now we have got the access of EC2 and we will start the deploy .
        cd mohammed-grad-project && docker pull mohammed180/medical-records-server:latest && docker-compose up -d
    
