# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserDetail {
  label: String
}

type UserProfile {
  id: String!
  nationalId: String!
  name: String!
  email: String
  gender: Gender!
  dob: DateTime!
  avg_monthly_income: Float
  weight: String
  height_cm: Float
  image_src: String
  employmentStatus: String!
  maritalStatus: String!
  educationalLevel: String!
  medicalSpecialization: MedicalSpecialization
}

enum Gender {
  Male
  Female
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum MedicalSpecialization {
  Anesthesia
  Cardiovascular
  CommunityHealth
  Dentistry
  Dermatology
  DietNutrition
  Emergency
  Endocrine
  Gastroenterologic
  Genetic
  Geriatric
  Gynecologic
  Hematologic
  Infectious
  LaboratoryScience
  Midwifery
  Musculoskeletal
  Neurologic
  Nursing
  Obstetric
  Oncologic
  Optometric
  Otolaryngologic
  Pathology
  Pediatric
  PharmacySpecialty
  Physiotherapy
  PlasticSurgery
  Podiatric
  PrimaryCare
  Psychiatric
  PublicHealth
  Pulmonary
  Radiography
  Renal
  RespiratoryTherapy
  Rheumatologic
  SpeechPathology
  Surgical
  Toxicologic
  Urologic
}

type MessageType {
  id: String!
  senderId: String!
  roomId: String!
  type: MessageKinds!
  value: String!
  createdAt: DateTime!
}

"""kinds of each message"""
enum MessageKinds {
  text
  image
  medicalRecord
}

type LastMessageType {
  id: String!
  senderId: String!
  roomId: String!
  type: MessageKinds!
  value: String!
  createdAt: DateTime!
  isMe: Boolean!
}

type RoomUserType {
  id: String!
  name: String!
  image_src: String
}

type RoomType {
  id: String!
  lastMessage: LastMessageType!
  otherUser: RoomUserType!
  lastMessageTimestamp: String!
}

type LoginResponseType {
  accessToken: String!
}

type Query {
  users: [UserProfile!]!
  me: UserProfile!
  getMyRooms: [RoomType!]!
}

type Mutation {
  createUser(data: CreateUserInput!): String!
  sendMessage(data: CreateMessageInputType!): MessageType!
  adminLogin(credentials: LoginInputType!): LoginResponseType!
}

input CreateUserInput {
  nationalId: String!
  name: String!
  email: String
  password: String!
  gender: Gender!
  dob: DateTime!
  avg_monthly_income: Float
  weight: String
  height_cm: Float
  maritalStatusId: Int!
  educationalLevelId: Int!
  employmentStatusId: Int!
}

input CreateMessageInputType {
  type: MessageKinds
  value: String!
  toId: String!
}

input LoginInputType {
  username: String!
  password: String!
}

type Subscription {
  messageSent: MessageType!
}